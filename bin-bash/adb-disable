#! /usr/bin/env bash

# Copyright Â© 2022, 2023 Boian Berberov
#
# Licensed under the EUPL-1.2 only.
# License text: https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
# SPDX-License-Identifier: EUPL-1.2

if   [[ "`adb get-state`" != 'device' ]]
then
	echo 'ERROR: Default Android device is not available' > /dev/stderr
	exit 1
fi

sdk="`adb shell 'getprop ro.build.version.sdk' | tr -d '\r'`"

if   (( "${sdk}" < 24 || 29 < "${sdk}" ))
then
	command='pm'
else
	command='cmd package'
fi

function pkgExists() {
	if   (( "${sdk}" < 24 ))
	then
		[[ -n "`adb shell pm path $1`" ]] && true || false
	else
		adb shell "pm path $1" > /dev/null
	fi
}

function pkgPath() {
	adb shell "pm path $1" | sed -e 's/\r//g; s/^package://'
}

function pkgEnabled() {
	# https://developer.android.com/reference/android/content/pm/PackageManager
	# COMPONENT_ENABLED_STATE_DEFAULT             - 0
	# COMPONENT_ENABLED_STATE_ENABLED             - 1
	# COMPONENT_ENABLED_STATE_DISABLED            - 2
	# COMPONENT_ENABLED_STATE_DISABLED_USER       - 3
	# COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED - 4

	adb shell "dumpsys package $1" | grep 'User 0:' | grep 'enabled=[01]' > /dev/null
}

function pkgDisableNormal() {
	if pkgEnabled "$1"
	then
		echo -n "Disabling $1 ... " \
		&& adb shell "pm disable $1" \
		&& echo -n "Clearing $1 ... " \
		&& adb shell "pm clear $1"
	else
		echo "Package $1 is not enabled"
	fi
}

function pkgDisableForced() {
	if   pkgEnabled "$1"
	then
		echo -n "Disabling $1 forcefully ... " \
		&& adb shell "pm disable-user --user 0 $1" \
		&& echo -n "Clearing $1 forcefully ... " \
		&& adb shell "pm clear --user 0 $1"
	else
		echo "Package $1 is not enabled"
	fi
}

if   pkgExists "$1"
then
	pkg_path="`pkgPath $1`"

	if
		[[ "${pkg_path:0:6}"  == '/data/'
		|| "${pkg_path:0:20}" == '/oem/removeable-app/'
		]]
	then
		pkgDisableNormal "$1"
	elif [[ "${pkg_path:0:8}" == '/system/' ]]
	then
		if
			[[ "${pkg_path:0:32}" == '/system/custpack/app/removeable/'
			|| "${pkg_path:0:26}" == '/system/vendor/preset-app/'
			]]
		then
			pkgDisableNormal "$1"
		else
			pkgDisableForced "$1"
		fi
	elif
		[[ "${pkg_path:0:6}" == '/apex/'
		|| "${pkg_path:0:8}" == '/vendor/'
		|| "${pkg_path:0:9}" == '/product/'
		]]
	then
		pkgDisableForced "$1"
	else
		echo -n "Unknown app path prefix: "
		pkgPath "$1"
		exit 1
	fi
else
	echo "Package $1 does not exist"
fi
