#! /usr/bin/env bash

# Copyright Â© 2023, 2024 Boian Berberov
#
# Licensed under the EUPL-1.2 only.
# License text: https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
# SPDX-License-Identifier: EUPL-1.2

function usage() {
echo '
Show the extended status of multiple repositories and/or trees
Options:
    --origin
    --path
    --repo
    --worktree
    --no-ab
    --status
    --upstream
'
}

declare -a dirs
opt_disppath='repo' # origin, path, git-dir, repo, worktree
opt_ab='true'
opt_status='false'
opt_upstream='false'
opt_untracked='true'
for opt in "$@"
do
	case "${opt}" in
		--origin)
			opt_disppath='origin'
		;;
		--path)
			opt_disppath='path'
		;;
		--git-dir)
			opt_disppath='git-dir'
		;;
		--repo)
			opt_disppath='repo'
		;;
		--worktree)
			opt_disppath='worktree'
		;;
		--no-ab)
			opt_ab='false'
		;;
		--status)
			opt_status='true'
		;;
		--upstream)
			opt_upstream='true'
		;;
		--no-untracked)
			opt_untracked='false'
		;;
		--help|-?)
			usage
			exit 0
		;;
		*)
			if [[ -d "${opt}" ]]
			then
				dirs+=("${opt}")
			else
				echo "ERROR: Unknown option or invalid path: ${opt}" > /dev/stderr
				echo > /dev/stderr
				echo "Use --help to see the available options" > /dev/stderr
				exit 1
			fi
		;;
	esac
done

pushd . > /dev/null
for src_path in "${dirs[@]}"
do
	echo "Looking for repos in ${src_path} ..."
	for worktree_file in $(find "${src_path}" -type f -name gitdir -print)
	do
		worktree="$(sed -e s:\/\.git\$:: ${worktree_file})"

		case "${opt_disppath}" in
			origin)
				if   git -C "${worktree}" remote | grep '^origin$' > /dev/null 2>&1
				then
					repo_origin="$(git -C "${worktree}" remote get-url origin)"
					disppath=${repo_origin}
				else
					repo_path=${worktree_file%gitdir}
					repo_shortpath=${repo_path#"${src_path}"}
					disppath="No \`origin\`; ${repo_shortpath:0:30}..."
				fi
			;;
			path)
				repo_path=${worktree_file%gitdir}
				disppath=${repo_path}
			;;
			git-dir)
				repo_path=${worktree_file%gitdir}
				repo_shortpath=${repo_path#"${src_path}"}
				disppath=${repo_shortpath}
			;;
			repo)
				repo_path=$(git -C "${worktree_file%gitdir}" rev-parse --git-common-dir)
				repo_shortpath=${repo_path#"${src_path}"}
				disppath=${repo_shortpath}
			;;
			worktree)
				# BUG in prefix substitution?
				disppath=${worktree}
			;;
			*)
		esac

		echo -ne "\e[1;30m${disppath}\e[0m:"$'\t'

		if [ -d "${worktree}" ]
		then
			cd "${worktree}"

			ref="$(git symbolic-ref --short -q HEAD)"

			echo -ne "\e[1;32m${ref}\e[0m"

			if   [[ 'true' == "${opt_ab}" ]]
			then
				echo -ne " is"

				ups_ref="$(git rev-parse --abbrev-ref -q --verify --end-of-options ${ref}@{upstream})"
				if [ -n ${ups_ref} ]
				then
					ahead=$(git rev-list --count ${ups_ref}..${ref})
					behind=$(git rev-list --count ${ref}..${ups_ref})
					if (( 0 < ${ahead} + ${behind} ))
					then
						if (( 0 < ${ahead} ))
						then
							echo -ne " \e[1;34m${ahead} ahead\e[0m"
						fi
						if (( 0 < ${behind} ))
						then
							echo -ne " \e[1;33m${behind} behind\e[0m"
						fi
					else
						echo -n ' up to date'
					fi
				else
					echo -n ' not tracking'
				fi
			fi

			if   [[ 'true' == "${opt_upstream}" ]]
			then
				if   git remote get-url upstream > /dev/null 2>&1
				then
					ups_ref="$(git rev-parse --abbrev-ref -q --verify --end-of-options UPSTREAM_HEAD)"
					if [ -n "${ups_ref}" ]
					then
						behind=$(git rev-list --count ${ref}..${ups_ref})
						if (( 0 < ${behind} ))
						then
							echo -ne ", \e[36m${behind} behind ${ups_ref}\e[0m"
						else
							echo -ne ", up to ${ups_ref}"
						fi
					else
						ups_ref="$(git rev-parse --abbrev-ref -q --verify --end-of-options refs/UPSTREAM_HEAD)"
						if [ -n "${ups_ref}" ]
						then
							behind=$(git rev-list --count ${ref}..${ups_ref})
							if (( 0 < ${behind} ))
							then
								echo -ne ", \e[36m${behind} behind ${ups_ref}\e[0m"
							else
								echo -ne ", up to ${ups_ref}"
							fi
						else
							echo -ne ", \e[1;31mno UPSTREAM_HEAD\e[0m"
						fi
					fi
				fi
			fi

			if   [[ 'true' == "${opt_status}" ]]
			then
				if [[ 'true' == "${opt_untracked}" ]]
				then
					status="$(git status --untracked-files=all --porcelain)"
				else
					status="$(git status --untracked-files=no --porcelain)"
				fi
				status_index="$(grep -G -c   '^[^ ][ ]'    <<< ${status})"
				status_tree="$(grep -G -c    '^[ ][^ ]'   <<< ${status})"
				status_both="$(grep -G -c '^[^ ?!][^ ?!]' <<< ${status})"
				status_untr="$(grep -G -c      '^??'      <<< ${status})"
				if (( 0 < ${status_both} + ${status_index} + ${status_tree} + ${status_untr} ))
				then
					echo -n $';\ttree has'
					if (( 0 < ${status_both} ))
					then
						echo -ne " \e[36m${status_both} stage+mod\e[0m"
					fi
					if (( 0 < ${status_index} ))
					then
						echo -ne " \e[32m${status_index} staged\e[0m"
					fi
					if (( 0 < ${status_tree} ))
					then
						echo -ne " \e[33m${status_tree} modified\e[0m"
					fi
					if (( 0 < ${status_untr} ))
					then
						echo -ne " \e[31m${status_untr} untracked\e[0m"
					fi
					echo -n ' files'
				fi
			fi

		echo

		else
			echo -e '\e[1;31mERROR: Worktree does not exist!\e[0m'
		fi
	done
done
popd > /dev/null
